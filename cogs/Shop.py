import disnake
from disnake.ext import commands
import sqlite3
import random
from cogs.services.BalanceService import BalanceService

conn = sqlite3.connect('inventory.db')
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS inventory (
    user_id INTEGER,
    item_name TEXT,
    amount INTEGER,
    PRIMARY KEY(user_id, item_name)
)
""")

conn.commit()

SHOP_ITEMS = {
    10: {
        "name": "–í–æ–∑–¥—É—Ö",
        "emoji": "üí®",
        "desc": "–ß–∏—Å—Ç—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π",
        "use_text": "–í—ã –≥–ª—É–±–æ–∫–æ –≤–¥–æ—Ö–Ω—É–ª–∏ –≤–æ–∑–¥—É—Ö... –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ. –ù–æ —Å—Ç–∞–ª–æ –ª–µ–≥—á–µ –Ω–∞ –¥—É—à–µ."
    },
    100: {
        "name": "–†–µ–∑–∏–Ω–æ–≤–∞—è —É—Ç–∫–∞",
        "emoji": "ü¶Ü",
        "desc": "–ö–≤–∞-–ö–≤–∞",
        "use_text": "ü¶Ü –ö–≤–∞-–∫–≤–∞! –£—Ç–∫–∞ –æ–¥–æ–±—Ä—è–µ—Ç –≤–∞—à –≤—ã–±–æ—Ä. –¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞ 5% —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ!"
    },
    200: {
        "name": "–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
        "emoji": "üéü",
        "desc": "–ú–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –æ—Ç 100 –¥–æ 1000üìº",
        "effect": "lottery",
    },
    500: {
        "name": "–ö–æ—Å—Ç—é–º –≥–æ—Ä–Ω–∏—á–Ω–æ–π",
        "emoji": "üëó",
        "desc": "–õ—É—á—à–∏–π —Ç–æ–≤–∞—Ä, —è–ø–æ–Ω—Å–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.",
        "role_id": 1386386401779646464,
        "use_text": "üëó –í—ã –æ–±–ª–∞—á–∏–ª–∏—Å—å –≤ –∫–æ—Å—Ç—é–º –≥–æ—Ä–Ω–∏—á–Ω–æ–π. –í—ã–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å."
    },
    700: {
        "name": "–ö–æ–º–∞—Ä—É —Ñ–∞–Ω",
        "emoji": "üéß",
        "desc": "–õ—é–±–∏—à—å –ö–æ–º–∞—Ä—É?",
        "role_id": 1277235825830264912,
        "use_text": "üéß –í—ã –Ω–∞–¥–µ–ª–∏ –Ω–∞—É—à–Ω–∏–∫–∏ –∏ –ø–æ–≥—Ä—É–∑–∏–ª–∏—Å—å –≤ –º–∏—Ä –ö–æ–º–∞—Ä—É. –í—ã–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å."
    },
    1000: {
        "name": "–°—á–∞—Å—Ç–ª–∏–≤–∞—è –º–æ–Ω–µ—Ç–∞",
        "emoji": "ü™ô ",
        "desc": "–•–æ–¥—è—Ç —Å–ª—É—Ö–∏, —á—Ç–æ –æ–Ω–æ –¥–∞–µ—Ç –¥–µ–Ω—å–≥–∏",
        "role_id": 1398213186137751632,
        "use_text": "ü™ô –£–¥–∞—á–∞ –±—É–¥–µ—Ç —è–≤–Ω–æ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. –í—ã–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å."
    },
    3000: {
        "name": "–í–∞–∂–Ω—ã–π –≥–æ—Å—Ç—å",
        "emoji": "üëî",
        "desc": "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–π–Ω–∞–º",
        "role_id": 1371104857775411251,
        "use_text": "üëî –í–∞—Å –ø—Ä–æ–≤–æ–¥—è—Ç —á–µ—Ä–µ–∑ –ø–æ—Ç–∞–π–Ω—ã–µ –¥–≤–µ—Ä–∏... –í—ã ‚Äî –í–∞–∂–Ω—ã–π –≥–æ—Å—Ç—å. –í—ã–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å."
    },
    4000: {
        "name": "–í–ª–∞–¥–µ–ª–µ—Ü –±–ª–æ–≥–∞",
        "emoji": "üìù",
        "desc": "–ë–ª–æ–≥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
        "role_id": 1266857840732143697,
        "use_text": "üìù –í—ã —Å—Ç–∞–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–ª–æ–≥–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏–Ω–≥–∞–Ω–∏—Ç–µ –æ–± —ç—Ç–æ–º <@679722204144992262>. –í—ã–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å."
    },
    5000: {
        "name": "–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å",
        "emoji": "üé®",
        "desc": "–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å —Å —Ü–≤–µ—Ç–æ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É.",
        "role_id": 1266857840732143697,
        "use_text": "üé® –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ø–æ–º—è–Ω–∏—Ç–µ <@&1266812096209879123> –∏ —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–º—è –∏ —Ü–≤–µ—Ç —Ä–æ–ª–∏."
    },
    6000: {
        "name": "–ö–∞–ø–∏—Ç–∞–ª–∏—Å—Ç",
        "emoji": "üí∞",
        "desc": "–û–Ω —É–∂–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ —Ç–µ–±–µ",
        "role_id": 1278746179206910053,
        "use_text": "üí∞ –î–µ–Ω—å–≥–∏ —Ç–µ–∫—É—Ç –≤ –≤–∞—à–∏—Ö –≤–µ–Ω–∞—Ö. –í—ã —Å—Ç–∞–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–º –∫–∞–ø–∏—Ç–∞–ª–∏—Å—Ç–æ–º! –í—ã–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å."
    },
    30000: {
        "name": "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å —ç–∫–æ–Ω–æ–º–∏–∫–∏",
        "emoji": "üëë",
        "desc": "–ë–æ–≥–∞—Ç–µ–π—à–∏–π —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
        "role_id": 1371105600204701829,
        "use_text": "üëë –í—Å—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ —Å–∫–ª–æ–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –≤–∞–º–∏. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã ‚Äî –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –±–æ–≥–∞—Ç—Å—Ç–≤–∞! –í—ã–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å."
    }
}

class Shop(commands.Cog):

    def __init__(self, bot):
        self.bot = bot

    def add_to_inventory(self, user_id: int, item_name: str, amount: int):
        cursor.execute(
            "SELECT amount FROM inventory WHERE user_id = ? AND item_name = ?",
            (user_id, item_name)
        )
        result = cursor.fetchone()

        if result:
            new_amount = result[0] + amount
            cursor.execute(
                "UPDATE inventory SET amount = ? WHERE user_id = ? AND item_name = ?",
                (new_amount, user_id, item_name)
            )
        else:
            cursor.execute(
                "INSERT INTO inventory (user_id, item_name, amount) VALUES (?, ?, ?)",
                (user_id, item_name, amount)
            )
        conn.commit()

    def get_inventory(self, user_id: int):
        cursor.execute(
            "SELECT item_name, amount FROM inventory WHERE user_id = ?",
            (user_id,)
        )
        return cursor.fetchall()

    @commands.slash_command(name='inventory', description='–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å')
    async def inventory(self, ctx, member: disnake.Member = None):
        target = member or ctx.author
        items = self.get_inventory(target.id)
        if not items:
            await ctx.send(embed=disnake.Embed(title=f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {target.display_name}", description="üì¶–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.", color=0xFFFFFF))
            return
        embed = disnake.Embed(title=f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {target.display_name}", color=0xFFFFFF)
        for item_name, amount in items:
            emoji = next((info["emoji"] for info in SHOP_ITEMS.values() if info["name"] == item_name), '')
            embed.add_field(name=f"{emoji} {item_name}", value=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:\n{amount}", inline=False)
        if ctx.author.id == target.id:
            await ctx.send(embed=embed, view=ItemDropdownView(self.bot, target.id, items))
        else:
            await ctx.send(embed=embed)

    @commands.slash_command(name='shop', description='–ú–∞–≥–∞–∑–∏–Ω')
    async def shop(self, ctx):
        embed = disnake.Embed(title='–ú–∞–≥–∞–∑–∏–Ω watershop', color=0xFFFFFF)
        for idx, (price, info) in enumerate(SHOP_ITEMS.items(), start=1):
            prefix = "‚òÖ" if "role_id" in info else ""
            embed.add_field(
                name=f"{prefix}{idx}. {info['emoji']} {info['name']} ‚Äî {price}üìº",
                value=info['desc'],
                inline=False
            )
            embed.set_footer(text='‚òÖ ‚Äî –ø—Ä–µ–¥–º–µ—Ç—ã —Å —Ä–æ–ª—å—é –∏ –¥–æ—Ö–æ–¥–æ–º')
        await ctx.send(embed=embed, view=DropdownView(self.bot))

class Dropdown(disnake.ui.StringSelect):
    def __init__(self, bot):
        self.bot = bot
        options = [
            disnake.SelectOption(
                label=f"{item['emoji']} {item['name']} ‚Äî {price}üìº",
                description=item['desc'],
                value=str(price)
            ) for price, item in SHOP_ITEMS.items()
        ]
        super().__init__(placeholder='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏', options=options)

    async def callback(self, ctx: disnake.MessageInteraction):
        price = int(self.values[0])
        item = SHOP_ITEMS[price]

        view = ConfirmPurchaseView(self.bot, ctx.author.id, price, item)
        embed = disnake.Embed(
            title='–ü–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏',
            description=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {item['emoji']} **{item['name']}**?",
            color=0xFFFFFF
        )
        await ctx.response.send_message(embed=embed, view=view, ephemeral=True)

class DropdownView(disnake.ui.View):
    def __init__(self, bot):
        super().__init__()
        self.add_item(Dropdown(bot))

class ItemDropdown(disnake.ui.StringSelect):
    def __init__(self, bot, user_id, items):
        self.bot = bot
        self.user_id = user_id
        options = []
        for item_name, amount in items:
            for price, info in SHOP_ITEMS.items():
                if info['name'] == item_name:
                    options.append(disnake.SelectOption(
                        label=f"{info['emoji']} {item_name}",
                        value=str(price),
                        description=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}"
                    ))
                    break
        super().__init__(placeholder='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç', options=options)

    async def callback(self, ctx):
        if ctx.author.id != self.user_id:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)
            return
        
        price = int(self.values[0])
        item = SHOP_ITEMS[price]
        cursor.execute("SELECT amount FROM inventory WHERE user_id = ? AND item_name = ?", (self.user_id, item['name']))
        result = cursor.fetchone()
        if result and result[0] > 0:
            new_amount = result[0] - 1
            if new_amount == 0:
                cursor.execute("DELETE FROM inventory WHERE user_id = ? AND item_name = ?", (self.user_id, item['name']))
            else:
                cursor.execute("UPDATE inventory SET amount = ? WHERE user_id = ? AND item_name = ?", (new_amount, self.user_id, item['name']))
            conn.commit()

            effect = item.get("effect")
            if effect == "lottery":
                lottery_rewards = [
                    (100, 50),
                    (200, 25),
                    (500, 15),
                    (700, 7),
                    (1000, 3)
                ]
                roll = random.randint(1, 100)
                current = 0
                reward = 0

                for amount, chance in lottery_rewards:
                    current += chance
                    if roll <= current:
                        reward = amount
                        break

                balance_service = BalanceService()
                balance_service.update_balance(self.user_id, reward)

                embed = disnake.Embed(
                    title='–õ–æ—Ç–µ—Ä–µ—è',
                    description=f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {item['emoji']} **{item['name']}** –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ||**{reward}üìº**||!",
                    color=0xFFFFFF
                )
                embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.display_avatar.url)

                if new_amount > 0:
                    view = disnake.ui.View()
                    view.add_item(UseAgainButton(self.bot, self.user_id, price, item["name"], new_amount))
                    await ctx.response.send_message(embed=embed, view=view)
                else:
                    await ctx.response.send_message(embed=embed)
                return

            role_id = item.get('role_id')
            if role_id:
                role = ctx.guild.get_role(role_id)
                if role:
                    await ctx.author.add_roles(role)
            embed = disnake.Embed(
                title=None,
                description=item.get('use_text'),
                color=0xFFFFFF
            )
            embed.set_author(name=f'{ctx.author.display_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {item["emoji"]} {item["name"]}', icon_url=ctx.author.display_avatar.url)
            
            if not item.get("role_id") and new_amount > 0:
                view = disnake.ui.View()
                view.add_item(UseAgainButton(self.bot, self.user_id, price, item["name"], new_amount))
                await ctx.response.send_message(embed=embed, view=view)
            else:
                await ctx.response.send_message(embed=embed)

class ItemSellDropdown(disnake.ui.StringSelect):
    def __init__(self, bot, user_id, items):
        self.bot = bot
        self.user_id = user_id
        self.items = items

        options = []
        for item_name, amount in items:
            for price, info in SHOP_ITEMS.items():
                if info['name'] == item_name:
                    options.append(disnake.SelectOption(
                        label=f"{info['emoji']} {item_name} x {amount}",
                        value=f"{price}|{item_name}|{amount}",
                        description=f"{info['name']} x {amount} - {price // 2}üìº –∑–∞ —à—Ç"
                    ))
                    break

        super().__init__(
            placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏',
            options=options,
            min_values=1,
            max_values=len(options)  
        )

    async def callback(self, ctx):
        if ctx.author.id != self.user_id:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)
            return

        total_reward = 0
        balance_service = BalanceService()

        for selection in self.values:
            price_str, item_name, amount_str = selection.split("|")
            price = int(price_str)
            amount = int(amount_str)

            cursor.execute(
                "SELECT amount FROM inventory WHERE user_id = ? AND item_name = ?",
                (self.user_id, item_name)
            )
            result = cursor.fetchone()

            if result:
                cursor.execute("DELETE FROM inventory WHERE user_id = ? AND item_name = ?", (self.user_id, item_name))
                reward = (price // 2) * amount
                total_reward += reward

        conn.commit()
        balance_service.update_balance(self.user_id, total_reward)

        embed = disnake.Embed(
            title='–ü—Ä–æ–¥–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            description=f'–í—ã –ø—Ä–æ–¥–∞–ª–∏ {len(self.values)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –ø–æ–ª—É—á–∏–ª–∏ **{total_reward}üìº**.',
            color=0xFFFFFF
        )
        embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.display_avatar.url)
        await ctx.response.send_message(embed=embed)

class ItemDropdownView(disnake.ui.View):
    def __init__(self, bot, user_id, items):
        super().__init__()
        self.add_item(ItemDropdown(bot, user_id, items))
        self.add_item(ItemSellDropdown(bot, user_id, items))

class ConfirmPurchaseView(disnake.ui.View):
    def __init__(self, bot, user_id, item_price, item_info):
        super().__init__(timeout=60)
        self.bot = bot
        self.user_id = user_id
        self.item_price = item_price
        self.item_info = item_info

    async def purchase(self, ctx: disnake.MessageInteraction, amount: int):
        await ctx.response.defer()
        
        balance_service = BalanceService()
        total_price = self.item_price * amount
        user_balance = balance_service.get_balance(self.user_id)

        if user_balance < total_price:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.',
                color=0xFFFFFF
            )
            await ctx.response.edit_message(embed=embed, view=None)
            self.stop()
            return

        balance_service.update_balance(self.user_id, -total_price)
        shop_cog = self.bot.get_cog('Shop')
        shop_cog.add_to_inventory(self.user_id, self.item_info['name'], amount)

        embed = disnake.Embed(
            title='–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!',
            description=f"–í—ã –∫—É–ø–∏–ª–∏ {amount} √ó {self.item_info['emoji']} **{self.item_info['name']}** –∑–∞ {total_price}üìº. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ /inventory",
            color=0xFFFFFF
        )
        embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.display_avatar.url)
        await ctx.channel.send(embed=embed)

    @disnake.ui.button(label='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', style=disnake.ButtonStyle.green)
    async def confirm(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        await self.purchase(ctx, 1)

    @disnake.ui.button(label='–ö—É–ø–∏—Ç—å x5', style=disnake.ButtonStyle.blurple)
    async def buy_five(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        await self.purchase(ctx, 5)

    @disnake.ui.button(label='–û—Ç–º–µ–Ω–∞', style=disnake.ButtonStyle.red)
    async def cancel(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        embed = disnake.Embed(
            title='–û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏',
            description='–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.'
        )
        await ctx.response.edit_message(embed=embed, view=None)
        self.stop()

class UseAgainButton(disnake.ui.Button):
    def __init__(self, bot, user_id, item_price, item_name, remaining_amount):
        super().__init__(
            label=f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—â—ë [{remaining_amount}]',
            style=disnake.ButtonStyle.green
        )
        self.bot = bot
        self.user_id = user_id
        self.item_price = item_price
        self.item_name = item_name

    async def callback(self, ctx: disnake.MessageInteraction):
        if ctx.author.id != self.user_id:
            await ctx.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.", ephemeral=True)
            return

        item = SHOP_ITEMS[self.item_price]

        cursor.execute("SELECT amount FROM inventory WHERE user_id = ? AND item_name = ?", (self.user_id, self.item_name))
        result = cursor.fetchone()
        if not result or result[0] <= 0:
            await ctx.response.send_message("–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.", ephemeral=True)
            return

        new_amount = result[0] - 1
        if new_amount == 0:
            cursor.execute("DELETE FROM inventory WHERE user_id = ? AND item_name = ?", (self.user_id, self.item_name))
        else:
            cursor.execute("UPDATE inventory SET amount = ? WHERE user_id = ? AND item_name = ?", (new_amount, self.user_id, self.item_name))
        conn.commit()

        balance_service = BalanceService()

        if item.get("effect") == "lottery":
            lottery_rewards = [
                (100, 50),
                (200, 25),
                (500, 15),
                (700, 7),
                (1000, 3)
            ]
            roll = random.randint(1, 100)
            current = 0
            reward = 0

            for amount, chance in lottery_rewards:
                current += chance
                if roll <= current:
                    reward = amount
                    break

            balance_service.update_balance(self.user_id, reward)

            embed = disnake.Embed(
                title='–õ–æ—Ç–µ—Ä–µ—è',
                description=f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {item['emoji']} **{item['name']}** –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ||**{reward}üìº**||!",
                color=0xFFFFFF
            )
        else:
            embed = disnake.Embed(
                description=item.get("use_text"),
                color=0xFFFFFF
            )

        embed.set_author(name=f'{ctx.author.display_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {item["emoji"]} {item["name"]}', icon_url=ctx.author.display_avatar.url)

        if new_amount > 0:
            view = disnake.ui.View()
            view.add_item(UseAgainButton(self.bot, self.user_id, self.item_price, self.item_name, new_amount))
            await ctx.response.edit_message(embed=embed, view=view)
        else:
            await ctx.response.edit_message(embed=embed, view=None)

def setup(bot):
    bot.add_cog(Shop(bot))