import disnake
from disnake.ext import commands
import sqlite3
import random

conn = sqlite3.connect('inventory.db')
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS inventory (
    user_id INTEGER,
    item_name TEXT,
    amount INTEGER,
    PRIMARY KEY(user_id, item_name)
)
""")

conn.commit()

SHOP_ITEMS = {
    10: {
        "name": "–í–æ–∑–¥—É—Ö",
        "emoji": "üí®",
        "desc": "–ß–∏—Å—Ç—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π"
    },
    100: {
        "name": "–ë–∞–Ω–∞–Ω—á–µ–∫–µ",
        "emoji": "üçå",
        "desc": "–ü—Ä–æ—Å—Ç–æ –±–∞–Ω–∞–Ω—á–µ–∫–µ. –ù–æ –æ–Ω–∏ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –ø–æ–∑–∂–µ..."
    },
    200: {
        "name": "–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
        "emoji": "üéü",
        "desc": "–ú–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –æ—Ç 100 –¥–æ 1000üìº",
        "effect": "lottery"
    },
    1000: {
        "name": "–ö–æ–º–∞—Ä—É —Ñ–∞–Ω",
        "emoji": "üéß",
        "desc": "–õ—é–±–∏—à—å –ö–æ–º–∞—Ä—É?",
        "role_id": 1277235825830264912
    },
    2000: {
        "name": "–í–ª–∞–¥–µ–ª–µ—Ü –±–ª–æ–≥–∞",
        "emoji": "üìù",
        "desc": "–ë–ª–æ–≥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
        "role_id": 1266857840732143697
    },
    3000: {
        "name": "–•—Ä–∞–Ω–∏—Ç–µ–ª—å –ø–æ—Ä—è–¥–∫–∞",
        "emoji": "üõ°",
        "desc": "–ù–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –Ω–æ –±—É–¥—Ç–æ –∏–º —Ä–æ–¥–∏–ª—Å—è",
        "role_id": 1278746391149154409
    },
    5000: {
        "name": "–í–∞–∂–Ω—ã–π –≥–æ—Å—Ç—å",
        "emoji": "üëî",
        "desc": "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–π–Ω–∞–º",
        "role_id": 1371104857775411251
    },
    8000: {
        "name": "–ö–∞–ø–∏—Ç–∞–ª–∏—Å—Ç",
        "emoji": "üí∞",
        "desc": "–û–Ω —É–∂–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ —Ç–µ–±–µ",
        "role_id": 1278746179206910053
    },
    30000: {
        "name": "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å —ç–∫–æ–Ω–æ–º–∏–∫–∏",
        "emoji": "üëë",
        "desc": "–ë–æ–≥–∞—Ç–µ–π—à–∏–π —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
        "role_id": 1371105600204701829
    }
}

class Shop(commands.Cog):

    def __init__(self, bot):
        self.bot = bot

    def add_to_inventory(self, user_id: int, item_name: str, amount: int):
        cursor.execute(
            "SELECT amount FROM inventory WHERE user_id = ? AND item_name = ?",
            (user_id, item_name)
        )
        result = cursor.fetchone()

        if result:
            new_amount = result[0] + amount
            cursor.execute(
                "UPDATE inventory SET amount = ? WHERE user_id = ? AND item_name = ?",
                (new_amount, user_id, item_name)
            )
        else:
            cursor.execute(
                "INSERT INTO inventory (user_id, item_name, amount) VALUES (?, ?, ?)",
                (user_id, item_name, amount)
            )
        conn.commit()

    def get_inventory(self, user_id: int):
        cursor.execute(
            "SELECT item_name, amount FROM inventory WHERE user_id = ?",
            (user_id,)
        )
        return cursor.fetchall()

    @commands.slash_command(name='inventory', description='–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å')
    async def inventory(self, ctx, member: disnake.Member = None):
        target = member or ctx.author
        items = self.get_inventory(target.id)
        if not items:
            await ctx.send(embed=disnake.Embed(title=f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {target.display_name}", description="üì¶–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.", color=0xFFFFFF))
            return
        embed = disnake.Embed(title=f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {target.display_name}", color=0xFFFFFF)
        for item_name, amount in items:
            emoji = next((info["emoji"] for info in SHOP_ITEMS.values() if info["name"] == item_name), '')
            embed.add_field(name=f"{emoji} {item_name}", value=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:\n```{amount}```", inline=False)
        if ctx.author.id == target.id:
            await ctx.send(embed=embed, view=ItemDropdownView(self.bot, target.id, items))
        else:
            await ctx.send(embed=embed)

    @commands.slash_command(name='shop', description='–ú–∞–≥–∞–∑–∏–Ω')
    async def shop(self, ctx):
        embed = disnake.Embed(title='–ú–∞–≥–∞–∑–∏–Ω watershop', color=0xFFFFFF)
        for price, info in SHOP_ITEMS.items():
            embed.add_field(
                name=f"{info['emoji']} {info['name']} ‚Äî {price}üìº",
                value=info['desc'],
                inline=False
            )
        await ctx.send(embed=embed, view=DropdownView(self.bot))

class Dropdown(disnake.ui.StringSelect):
    def __init__(self, bot):
        self.bot = bot
        options = [
            disnake.SelectOption(
                label=f"{item['emoji']} {item['name']} ‚Äî {price}üìº",
                description=item['desc'],
                value=str(price)
            ) for price, item in SHOP_ITEMS.items()
        ]
        super().__init__(placeholder='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏', options=options)

    async def callback(self, ctx: disnake.MessageInteraction):
        price = int(self.values[0])
        item = SHOP_ITEMS[price]

        view = ConfirmPurchaseView(self.bot, ctx.author.id, price, item)
        embed = disnake.Embed(
            title='–ü–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏',
            description=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {item['emoji']} **{item['name']}**?",
            color=0xFFFFFF
        )
        await ctx.response.send_message(embed=embed, view=view, ephemeral=True)

class DropdownView(disnake.ui.View):
    def __init__(self, bot):
        super().__init__()
        self.add_item(Dropdown(bot))

class ItemDropdown(disnake.ui.StringSelect):
    def __init__(self, bot, user_id, items):
        self.bot = bot
        self.user_id = user_id
        options = []
        for item_name, amount in items:
            for price, info in SHOP_ITEMS.items():
                if info['name'] == item_name:
                    options.append(disnake.SelectOption(
                        label=f"{info['emoji']} {item_name}",
                        value=str(price),
                        description=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}"
                    ))
                    break
        super().__init__(placeholder='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç', options=options)

    async def callback(self, ctx):
        price = int(self.values[0])
        item = SHOP_ITEMS[price]
        cursor.execute("SELECT amount FROM inventory WHERE user_id = ? AND item_name = ?", (self.user_id, item['name']))
        result = cursor.fetchone()
        if result and result[0] > 0:
            new_amount = result[0] - 1
            if new_amount == 0:
                cursor.execute("DELETE FROM inventory WHERE user_id = ? AND item_name = ?", (self.user_id, item['name']))
            else:
                cursor.execute("UPDATE inventory SET amount = ? WHERE user_id = ? AND item_name = ?", (new_amount, self.user_id, item['name']))
            conn.commit()

            effect = item.get("effect")
            if effect == "lottery":
                lottery_rewards = [
                    (100, 54),
                    (200, 30),
                    (500, 10),
                    (700, 5),
                    (1000, 1)
                ]
                roll = random.randint(1, 100)
                current = 0
                reward = 0

                for amount, chance in lottery_rewards:
                    current += chance
                    if roll <= current:
                        reward = amount
                        break

                economy = self.bot.get_cog('Economy')
                economy.update_balance(self.user_id, reward)

                embed = disnake.Embed(
                    title="–õ–æ—Ç–µ—Ä–µ—è",
                    description=f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {item['emoji']} **{item['name']}** –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ **{reward}üìº**!",
                    color=0xFFFFFF
                )
                await ctx.response.send_message(embed=embed)
                return

            role_id = item.get('role_id')
            if role_id:
                role = ctx.guild.get_role(role_id)
                if role:
                    await ctx.author.add_roles(role)
            embed = disnake.Embed(
                title='–ü—Ä–µ–¥–º–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω',
                description=f'–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {item["emoji"]} **{item["name"]}**!',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed)

class ItemDropdownView(disnake.ui.View):
    def __init__(self, bot, user_id, items):
        super().__init__()
        self.add_item(ItemDropdown(bot, user_id, items))

class ConfirmPurchaseView(disnake.ui.View):
    def __init__(self, bot, user_id, item_price, item_info):
        super().__init__(timeout=60)
        self.bot = bot
        self.user_id = user_id
        self.item_price = item_price
        self.item_info = item_info

    async def purchase(self, ctx: disnake.MessageInteraction, amount: int):
        economy = self.bot.get_cog('Economy')
        total_price = self.item_price * amount
        user_balance = economy.get_balance(self.user_id)

        if user_balance < total_price:
            await ctx.response.edit_message(content=f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {amount} –ø—Ä–µ–¥–º–µ—Ç{"–æ–≤" if amount > 1 else ""} –∑–∞ {total_price}üìº.', view=None)
            self.stop()
            return

        economy.update_balance(self.user_id, -total_price)
        shop_cog = self.bot.get_cog('Shop')
        shop_cog.add_to_inventory(self.user_id, self.item_info['name'], amount)

        embed = disnake.Embed(
            title='–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!',
            description=f"–í—ã –∫—É–ø–∏–ª–∏ {amount} √ó {self.item_info['emoji']} **{self.item_info['name']}** –∑–∞ {total_price}üìº. ```–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ /inventory```",
            color=0xFFFFFF
        )
        await ctx.channel.send(embed=embed)
        self.stop()

    @disnake.ui.button(label='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', style=disnake.ButtonStyle.green)
    async def confirm(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        await self.purchase(ctx, 1)

    @disnake.ui.button(label='–ö—É–ø–∏—Ç—å x5', style=disnake.ButtonStyle.blurple)
    async def buy_five(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        await self.purchase(ctx, 5)

    @disnake.ui.button(label='–û—Ç–º–µ–Ω–∞', style=disnake.ButtonStyle.red)
    async def cancel(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        await ctx.response.edit_message(content='–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', view=None)
        self.stop()

def setup(bot):
    bot.add_cog(Shop(bot))