import disnake
from disnake.ext import commands
from datetime import datetime

TICKET_CATEGORY = 1266797507145629836
MODERAITON = [1266812096209879123, 1266805974585446506]
LOG_CHANNEL = 1266776037862412338

class Tickets(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        self.bot.add_view(TicketView(self.bot))
        self.bot.add_view(ManageTicketView(self.bot))

    @commands.command()
    @commands.has_any_role(*MODERAITON)
    async def ticket_setup(self, ctx):
        embed = disnake.Embed(
            title='–°–∏—Å—Ç–µ–º–∞ –¢–∏–∫–µ—Ç–æ–≤',
            description=(
                '–° –ø–æ–º–æ—â—å—é —Ç–∏–∫–µ—Ç–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–∞–∫—É—é-–ª–∏–±–æ —Ä–æ–ª—å, '
                '–Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞, –ª–∏–±–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n'
                '–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.'
            ),
            color=0xFFFFFF
        )
        view = TicketView(self.bot)
        await ctx.send(embed=embed, view=view)
    
    async def ticket_create(self, ctx, ticket_type, message):
        category = disnake.utils.get(ctx.guild.categories, id=TICKET_CATEGORY)

        overwrites = {
            ctx.guild.default_role: disnake.PermissionOverwrite(view_channel=False),
            ctx.author: disnake.PermissionOverwrite(view_channel=True)
        }
        
        for role_id in MODERAITON:
            role = ctx.guild.get_role(role_id)
            if role:
                overwrites[role] = disnake.PermissionOverwrite(view_channel=True)

        channel = await ctx.guild.create_text_channel(
            name=f'{ticket_type}-{ctx.author.name}',
            topic=f'{ticket_type} —Ç–∏–∫–µ—Ç –æ—Ç {ctx.author}',
            category=category,
            overwrites=overwrites,
            reason='–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç'
        )

        embed = disnake.Embed(
            title=f'{ticket_type} –¢–∏–∫–µ—Ç –æ—Ç {ctx.author}',
            description=message,
            color=0xFFFFFF
        )
        view = ManageTicketView(self.bot)
        await channel.send(embed=embed, view=view)

        embed_initial = disnake.Embed(
            title='–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω',
            description=f'–í–∞—à —Ç–∏–∫–µ—Ç: {channel.mention}.',
            color=0xFFFFFF
        )
        await ctx.response.send_message(embed=embed_initial, ephemeral=True)

    async def ticket_close(self, ctx):
        if ctx.channel.category and ctx.channel.category.id == TICKET_CATEGORY:
            await ctx.channel.delete(reason='–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç')
        else:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–∏–∫–µ—Ç–æ–º.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)

    async def ticket_close_with_reason(self, ctx, reason):
        if ctx.channel.category and ctx.channel.category.id == TICKET_CATEGORY:
            log_channel = self.bot.get_channel(LOG_CHANNEL)
            if log_channel:
                timestamp = int(datetime.timestamp(datetime.now()))
                log_embed = disnake.Embed(
                    title='–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç —Å –ø—Ä–∏—á–∏–Ω–æ–π',
                    description=(
                        f'**–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞:** {ctx.channel.name}\n'
                        f'**–ó–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:** {ctx.author.mention}\n'
                        f'**–ü—Ä–∏—á–∏–Ω–∞:** {reason}\n'
                        f'**–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è:** <t:{timestamp}:D> (<t:{timestamp}:R>)'
                    ),
                    color=0xFFFFFF
                )
                await log_channel.send(embed=log_embed)
            await ctx.channel.delete(reason=f'–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç —Å –ø—Ä–∏—á–∏–Ω–æ–π: {reason}')
        else:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–∏–∫–µ—Ç–æ–º.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)

    async def take_ticket(self, ctx):
        if ctx.channel.category and ctx.channel.category.id == TICKET_CATEGORY:
            embed = disnake.Embed(
                title='–¢–∏–∫–µ—Ç –≤–∑—è—Ç –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ',
                description=f'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {ctx.author.mention} –≤–∑—è–ª —Ç–∏–∫–µ—Ç –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.',
                color=0xFFFFFF
            )
            await ctx.channel.send(embed=embed)
        else:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–∏–∫–µ—Ç–æ–º.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)

class TicketView(disnake.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=None)
        self.bot = bot

    @disnake.ui.button(label='üìä–ó–∞—è–≤–∫–∞', style=disnake.ButtonStyle.primary, custom_id='ticket_request')
    async def ticket_request(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        message = (
            '–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏\n\n'
            '–¢–∏–ø –∑–∞—è–≤–æ–∫:\n'
            '- –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä.\n'
            '- –•–µ–ª–ø–µ—Ä.\n'
            '- –ò–≤–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä.\n'
            '- –†–µ–¥–∞–∫—Ç–æ—Ä –≥–∞–∑–µ—Ç—ã.\n\n'
            '–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏:\n'
            '1. –ö–∞–∫ –¥–æ–ª–≥–æ –≤—ã –∞–∫—Ç–∏–≤–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ?\n'
            '2. –ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞–Ω–Ω—É—é —Ä–æ–ª—å, –∏ –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –≤—ã?\n'
            '3. –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç (13+, –µ—Å–ª–∏ –±–æ–∏—Ç–µ—Å—å).\n'
            '4. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ (–ò–º–µ–µ—Ç—Å—è –≤ –≤–∏–¥—É –ª–∏—á–Ω–æ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ).\n'
            '5. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–µ–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—É?\n'
            '6. –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç?\n'
            '7. –ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –Ω–∞–¥–µ–∂–Ω—ã, –∏ –Ω–µ –±—É–¥–µ—Ç–µ –ª–∏ –≤—ã –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å —ç—Ç–∏–º?\n'
            '8. –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n'
        )
        await ctx.client.get_cog('Tickets').ticket_create(ctx, '–ó–∞—è–≤–∫–∞', message)

    @disnake.ui.button(label='üòà–†–µ–ø–æ—Ä—Ç', style=disnake.ButtonStyle.primary, custom_id='ticket_report')
    async def ticket_report(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        message = (
            '–§–æ—Ä–º–∞ —Ä–µ–ø–æ—Ä—Ç–∞\n\n'
            '1. –ù–∞ –∫–æ–≥–æ —Ä–µ–ø–æ—Ä—Ç?\n'
            '2. –ü—Ä–∏—á–∏–Ω–∞.\n'
            '3. –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞.\n'
            '4. –í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —ç—Ç–æ–º?'
        )
        await ctx.client.get_cog('Tickets').ticket_create(ctx, '–†–µ–ø–æ—Ä—Ç', message)

    @disnake.ui.button(label='ü§ñ–û—Ç—á–µ—Ç-–æ–±-–æ—à–∏–±–∫–∞—Ö', style=disnake.ButtonStyle.primary, custom_id='ticket_error_report')
    async def ticket_error_report(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        message = (
            '–§–æ—Ä–º–∞ –æ—Ç—á–µ—Ç–∞-–æ–±-–æ—à–∏–±–∫–∞—Ö\n\n'
            '1. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∫—Ä–∞—Ç–∫–æ.\n'
            '2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ –≤–∏–¥–µ–æ(–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ).\n'
            '3. –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.'
        )
        await ctx.client.get_cog('Tickets').ticket_create(ctx, '–û—Ç—á–µ—Ç-–æ–±-–æ—à–∏–±–∫–∞—Ö', message)

    @disnake.ui.button(label='‚ùìÔ∏è–í–æ–ø—Ä–æ—Å', style=disnake.ButtonStyle.primary, custom_id='ticket_question')
    async def ticket_question(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        message = (
            '–§–æ—Ä–º–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞\n\n'
            '1. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ –∫—Ä–∞—Ç–∫–æ.\n'
            '2. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.'
        )
        await ctx.client.get_cog('Tickets').ticket_create(ctx, '–í–æ–ø—Ä–æ—Å', message)

    @disnake.ui.button(label='‚ùîÔ∏è–†–µ–ø–æ—Ä—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞', style=disnake.ButtonStyle.primary, custom_id='ticket_mod_report')
    async def ticket_mod_report(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        message = (
            '–§–æ—Ä–º–∞ —Ä–µ–ø–æ—Ä—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n\n'
            '1. –ù–∞ –∫–∞–∫–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ–ø–æ—Ä—Ç?\n'
            '2. –ü—Ä–∏—á–∏–Ω–∞ (–∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ).\n'
            '3. –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞.\n'
            '4. –í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —ç—Ç–æ–º?'
        )
        await ctx.client.get_cog('Tickets').ticket_create(ctx, '–†–µ–ø–æ—Ä—Ç-–Ω–∞-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞', message)

    @disnake.ui.button(label='üéü–î—Ä—É–≥–æ–µ', style=disnake.ButtonStyle.primary, custom_id='ticket_other')
    async def ticket_other(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        message = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.'
        await ctx.client.get_cog('Tickets').ticket_create(ctx, '–î—Ä—É–≥–æ–µ', message)

class ManageTicketView(disnake.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=None)
        self.bot = bot

    @disnake.ui.button(label='–ó–∞–∫—Ä—ã—Ç—å –¢–∏–∫–µ—Ç', style=disnake.ButtonStyle.danger, custom_id='close_ticket')
    async def close_ticket(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        await ctx.client.get_cog('Tickets').ticket_close(ctx)

    @disnake.ui.button(label='–ó–∞–∫—Ä—ã—Ç—å –¢–∏–∫–µ—Ç —Å –ü—Ä–∏—á–∏–Ω–æ–π', style=disnake.ButtonStyle.danger, custom_id='close_ticket_with_reason')
    async def close_ticket_with_reason(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        embed = disnake.Embed(
            title='–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç',
            description='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞!',
            color=0xFFFFFF
        )
        await ctx.response.send_message(embed=embed, ephemeral=True)

        response = await self.bot.wait_for(
            'message',
            check=lambda m: m.author == ctx.author and m.channel == ctx.channel,
            timeout=60.0
        )
        if response:
            reason = response.content
            await ctx.client.get_cog('Tickets').ticket_close_with_reason(ctx, reason)
        else:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)

    @disnake.ui.button(label='–í–∑—è—Ç—å –Ω–∞ –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ', style=disnake.ButtonStyle.success, custom_id='take_ticket')
    async def take_ticket(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        if any(role.id in MODERAITON for role in ctx.author.roles):
            await ctx.client.get_cog('Tickets').take_ticket(ctx)
        else:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)

def setup(bot):
    bot.add_cog(Tickets(bot))