import disnake
from disnake import ApplicationCommandInteraction
from disnake.ext import commands
import random
import asyncio
import json
import time
from disnake import Option

class EconomyGames(commands.Cog):
    def __init__(self, bot, interaction=disnake.ApplicationCommandInteraction):
        self.bot = bot
        self.economy = self.bot.get_cog('Economy')
        with open('./cogs/economy/slots.json', encoding='utf-8') as f:
            self.slots_cfg = json.load(f)

    def format_balance(self, amount):
        return f'```{amount}üìº```'
    
    async def cog_slash_command_error(self, ctx: ApplicationCommandInteraction, error: Exception):
        if isinstance(error, disnake.ext.commands.errors.CommandOnCooldown):
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)

    @commands.slash_command(description='–°—ã–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç—ã')
    @commands.cooldown(6, 300, commands.BucketType.user)
    async def slots(self, ctx, bet: int): # —Å–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –õ–∏–Ω—É–∫—Å–æ–∏–¥—É –∑–∞ –∫–æ–º–∞–Ω–¥—É
        user_id = ctx.author.id
        user_balance = self.economy.get_balance(user_id)
        if user_balance < bet:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)
            return
        elif bet < 50:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–û—à–∏–±–∫–∞, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 50üìº.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)
            return
        self.economy.update_balance(ctx.author.id, -bet)
        symbols = []
        weights = []
        rewards = {}
        for key, value in self.slots_cfg.items():
            symbols.append(key)
            weights.append(value['chance'])
            rewards[key] = value['reward']

        slots_embed = disnake.Embed(
            title='–°–ª–æ—Ç—ã', 
            description='–ò–¥–µ—Ç —Ä—É–ª–µ—Ç–∫–∞...', 
            color=0xFFFFFF
        )
        slots_embed.add_field(name='–†–µ–∑—É–ª—å—Ç–∞—Ç', value='‚¨õ ‚¨õ ‚¨õ')
        slots_embed.set_footer(text=f'–°—Ç–∞–≤–∫–∞ „Éª {bet}üìº')
        await ctx.response.send_message(embed=slots_embed)

        for _ in range(6):
            await asyncio.sleep(0.7)
            if random.random() < 0.2:
                roll = random.sample(symbols, 3)
            else:
                roll = random.choices(symbols, weights, k=3)
            slots_embed.set_field_at(0, name='–†–µ–∑—É–ª—å—Ç–∞—Ç', value=' '.join(roll), inline=False)
            await ctx.edit_original_message(embed=slots_embed)

        symbol_count = {symbol: roll.count(symbol) for symbol in roll}
        
        total_reward = 0
        for symbol, count in symbol_count.items():
            if str(count) in rewards[symbol]:
                multiplier = rewards[symbol][str(count)]
                total_reward += bet * multiplier

        slots_embed.description = ''
        reward_text = '```–ù–∏—á–µ–≥–æ, —É–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑```'
        if total_reward > 0:
            reward_text = f'```{total_reward}üìº```'
            self.economy.update_balance(ctx.author.id, total_reward)
        slots_embed.add_field(name='–ù–∞–≥—Ä–∞–¥–∞', value=reward_text, inline=False)
        await ctx.edit_original_message(embed=slots_embed)

    @commands.slash_command(description='–û–±—ã—á–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞')
    async def roullete(self, ctx, bet: int, space: str = commands.Param(name='space', description='–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç', choices=['–ö—Ä–∞—Å–Ω—ã–π', '–ß–µ—Ä–Ω—ã–π'])):
        user_id = ctx.author.id
        user_balance = self.economy.get_balance(user_id)

        if user_balance < bet:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)
            return
        elif bet < 50:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–û—à–∏–±–∫–∞, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 50üìº.',
                color=0xFFFFFF
            )

        self.economy.update_balance(user_id, -bet)

        timestamp = int(time.time()) + 10  
        time_str = f'<t:{timestamp}:R>'

        embed = disnake.Embed(
            title='–†—É–ª–µ—Ç–∫–∞',
            description=f'–ò–≥—Ä–æ–∫ - {ctx.author.mention}\n–°—Ç–∞–≤–∫–∞: ```{bet}üìº –Ω–∞ {space}```\n–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {time_str}',
            color=0xFFFFFF
        )
        embed.set_footer(text=f'–°—Ç–∞–≤–∫–∞ „Éª {bet}üìº')
        await ctx.response.send_message(embed=embed)
        await asyncio.sleep(9)

        result = random.choice(['–ö—Ä–∞—Å–Ω—ã–π', '–ß–µ—Ä–Ω—ã–π'])

        if space == result:
            reward = bet * 2
            embed = disnake.Embed(
                title='–†—É–ª–µ—Ç–∫–∞',
                description=f'–í—ã–ø–∞–ª **{space}** —Ü–≤–µ—Ç.\n–í—ã–π–≥—Ä—ã—à:```{reward}üìº```',
                color=0xFFFFFF
            )
            embed.set_footer(text=f'–°—Ç–∞–≤–∫–∞ „Éª {bet}üìº')
            self.economy.update_balance(user_id, reward)
        else:
            embed = disnake.Embed(
                title='–†—É–ª–µ—Ç–∫–∞',
                description=f'–í—ã–ø–∞–ª **{result}** —Ü–≤–µ—Ç.\n–í—ã–π–≥—Ä—ã—à:```–ù–∏—á–µ–≥–æ, —É–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.```',
                color=0xFFFFFF
            )
            embed.set_footer(text=f'–°—Ç–∞–≤–∫–∞ „Éª {bet}üìº')
        await ctx.edit_original_message(embed=embed)

    @commands.slash_command(description='–°—ã–≥—Ä–∞—Ç—å –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É')
    @commands.cooldown(5, 300, commands.BucketType.user)
    async def russian_roulette(self, ctx, bet: int):
        user_id = ctx.author.id
        user_balance = self.economy.get_balance(user_id)
        
        if user_balance < bet:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)
            return
        elif bet < 50:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–û—à–∏–±–∫–∞, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 50üìº.',
                color=0xFFFFFF
            )

        self.economy.update_balance(user_id, -bet)

        embed = disnake.Embed(
            title='–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞',
            description=f'–£—á–∞—Å—Ç–Ω–∏–∫–∏ 1/5\n{ctx.author.mention}\n\n–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ```{bet}üìº```\n–°—Ç–∞–≤–∫–∞: ```{bet}üìº```',
            color=0xFFFFFF
        )

        game = {
            'admin' : ctx.author,
            'players' : [ctx.author],
            'bet' : bet,
            'total_bet' : bet,
            'current_player' : None,
            'start' : True
        }
        view = RouletteView(game, self.economy)
        await ctx.response.send_message(embed=embed, view=view)

class RouletteView(disnake.ui.View):
    def __init__(self, game, economy):
        super().__init__()
        self.game = game
        self.economy = economy

    @disnake.ui.button(label='–ù–∞—á–∞—Ç—å', custom_id='start', style=disnake.ButtonStyle.green, disabled=True)
    async def start(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        game = self.game
        game['current_player'] = random.choice(game['players'])

        if ctx.author != game['admin']:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)
            return

        await ctx.message.delete()

        embed = disnake.Embed(
            title='–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞',
            description=f'{game["current_player"].mention} –Ω–∞—á–∏–Ω–∞–µ—Ç —Å—Ç—Ä–µ–ª—è—Ç—å –ø–µ—Ä–≤—ã–º!\n\n'
                        f'–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ```{game["total_bet"]}üìº```\n–°—Ç–∞–≤–∫–∞: ```{game["bet"]}üìº```',
            color=0xFFFFFF
        )
        roulette_game_view = RouletteGameView(game, self.economy)

        await ctx.response.send_message(embed=embed, view=roulette_game_view)

    @disnake.ui.button(label='–ó–∞–π—Ç–∏', custom_id='join', style=disnake.ButtonStyle.blurple)
    async def join(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        user = ctx.author
        game = self.game  

        if user in game['players']:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)
            return

        if user == game['admin'] or len(game['players']) == 0:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –≤ –∏–≥—Ä—É, –µ—Å–ª–∏ —É–∂–µ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)
            return

        user_balance = self.economy.get_balance(user.id)
        if user_balance < game['bet']:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)
            return

        self.economy.update_balance(user.id, -game['bet'])
        game['players'].append(user)
        game['total_bet'] += game['bet']

        embed = disnake.Embed(
            title='–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞',
            description=f'–£—á–∞—Å—Ç–Ω–∏–∫–∏ {len(game["players"])} / 5\n{" ".join([p.mention for p in game["players"]])}\n\n'
                        f'–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ```{game["total_bet"]}üìº```\n–°—Ç–∞–≤–∫–∞: ```{game["bet"]}üìº```',
            color=0xFFFFFF
        )

        if len(game['players']) > 1:
            self.children[0].disabled = False  

        await ctx.response.edit_message(embed=embed, view=self)

    @disnake.ui.button(label='–û—Ç–º–µ–Ω–∏—Ç—å', custom_id='cancel', style=disnake.ButtonStyle.red)
    async def cancel(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        if ctx.author != self.game['admin']:  
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)
            return
        
        game = self.game
        game['start'] = False
        for player in game['players']:
            self.economy.update_balance(player.id, game['bet'])
        embed = disnake.Embed(
            title='–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞',
            description='–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.',
            color=0xFFFFFF
        )
        await ctx.message.delete()
        await ctx.response.send_message(embed=embed)

class RouletteGameView(disnake.ui.View):
    def __init__(self, game, economy):
        super().__init__()
        self.game = game
        self.economy = economy
        self.reset_chamber()

    def reset_chamber(self):
        self.shots_fired = 0
        self.bullet_position = random.randint(1, 6)

    async def next_turn(self, ctx):
        # –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫
        current_player = self.game['current_player']
        players = self.game['players']
        current_index = players.index(current_player)
        next_index = (current_index + 1) % len(players)
        self.game['current_player'] = players[next_index]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ö–æ–¥–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        embed = disnake.Embed(
            title='–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞',
            description=(
                f'–û—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–∞ {self.game["current_player"].mention}!\n\n'
                f'–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ```{self.game["total_bet"]}üìº```\n'
                f'–°—Ç–∞–≤–∫–∞: ```{self.game["bet"]}üìº```'
            ),
            color=0xFFFFFF
        )
        await ctx.followup.send(embed=embed, view=self)

    @disnake.ui.button(label='üî´–°—Ç—Ä–µ–ª—è—Ç—å', custom_id='shoot', style=disnake.ButtonStyle.blurple)
    async def shoot(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        game = self.game
        current_player = game['current_player']

        if ctx.author != current_player:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∞!',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)
            return

        self.shots_fired += 1
        is_deadly = self.shots_fired == self.bullet_position

        if is_deadly:
            # –ò–≥—Ä–æ–∫ –ø–æ–≥–∏–±–∞–µ—Ç
            game['players'].remove(current_player)
            embed = disnake.Embed(
                title='–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞',
                description=f'{current_player.mention} —Å—Ç—Ä–µ–ª—è–µ—Ç –∏... –ü–æ–≥–∏–±–∞–µ—Ç.',
                color=0xFFFFFF
            )
            await ctx.response.edit_message(embed=embed, view=None)
            await asyncio.sleep(5)
            await ctx.message.delete()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª—Å—è –ª–∏ –æ–¥–∏–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
            if len(game['players']) == 1:
                winner = game['players'][0]
                self.economy.update_balance(winner.id, game['total_bet'])
                embed = disnake.Embed(
                    title='–ü–æ–±–µ–¥–∞!',
                    description=f'{winner.mention} –ø–æ–±–µ–∂–¥–∞–µ—Ç –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç: ```{game["total_bet"]}üìº```',
                    color=0xFFFFFF
                )
                game['active'] = False
                await ctx.followup.send(embed=embed)
                self.stop()
                return
            else:
                self.reset_chamber()
                # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø–æ–≥–∏–±—à–µ–≥–æ
                next_index = 0
                game['current_player'] = game['players'][next_index]
                await self.next_turn(ctx)
        else:
            # –ò–≥—Ä–æ–∫ –≤—ã–∂–∏–≤–∞–µ—Ç
            embed = disnake.Embed(
                title='–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞',
                description=f'{current_player.mention} —Å—Ç—Ä–µ–ª—è–µ—Ç –∏... –í—ã–∂–∏–≤–∞–µ—Ç.',
                color=0xFFFFFF
            )
            await ctx.response.edit_message(embed=embed, view=None)
            await asyncio.sleep(5)
            await ctx.message.delete()

            # –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥
            await self.next_turn(ctx)

    @disnake.ui.button(label='üí∞–ü–æ–≤—ã—Å–∏—Ç—å –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å', custom_id='up', style=disnake.ButtonStyle.blurple)
    async def up(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        game = self.game
        current_player = game['current_player']

        if ctx.author != current_player:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∞!',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)
            return

        user_balance = self.economy.get_balance(ctx.author.id)
        if user_balance < game['bet']:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è.',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)
            return

        self.economy.update_balance(ctx.author.id, -game['bet'])
        game['total_bet'] += game['bet']

        embed = disnake.Embed(
            title='–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞',
            description=(
                f'{ctx.author.mention} —É–≤–µ–ª–∏—á–∏–ª –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥!\n\n'
                f'–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ```{game["total_bet"]}üìº```\n'
                f'–°—Ç–∞–≤–∫–∞: ```{game["bet"]}üìº```'
            ),
            color=0xFFFFFF
        )
        await ctx.response.edit_message(embed=embed, view=None)
        await asyncio.sleep(5)
        await ctx.message.delete()

        # –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥
        await self.next_turn(ctx)

    @disnake.ui.button(label='üí§–ü–æ–¥—Ç–æ–ª–∫–Ω—É—Ç—å', custom_id='push', style=disnake.ButtonStyle.blurple)
    async def push(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        game = self.game
        current_player = game['current_player']

        if ctx.author not in game['players']:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–æ–ª–∫–Ω—É—Ç—å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏–≥—Ä—ã!',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)
            return

        if ctx.author == current_player:
            embed = disnake.Embed(
                title='–û—à–∏–±–∫–∞',
                description='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–æ–ª–∫–Ω—É—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!',
                color=0xFFFFFF
            )
            await ctx.response.send_message(embed=embed, ephemeral=True)
            return

        embed = disnake.Embed(
            title='–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞',
            description=f'{ctx.author.mention} –ø–æ–¥—Ç–æ–ª–∫–Ω—É–ª {current_player.mention} –∫ –≤—ã—Å—Ç—Ä–µ–ª—É!',
            color=0xFFFFFF
        )
        await ctx.response.edit_message(embed=embed, view=None)
        await asyncio.sleep(5)
        await ctx.message.delete()

        self.shots_fired += 1
        is_deadly = self.shots_fired == self.bullet_position

        if is_deadly:
            game['players'].remove(current_player)
            embed = disnake.Embed(
                title='–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞',
                description=f'{current_player.mention} —Å—Ç—Ä–µ–ª—è–µ—Ç –∏... –ü–æ–≥–∏–±–∞–µ—Ç.',
                color=0xFFFFFF
            )
            message = await ctx.followup.send(embed=embed)
            await asyncio.sleep(5)
            await message.delete()

            if len(game['players']) == 1:
                winner = game['players'][0]
                self.economy.update_balance(winner.id, game['total_bet'])
                embed = disnake.Embed(
                    title='–ü–æ–±–µ–¥–∞!',
                    description=f'{winner.mention} –ø–æ–±–µ–∂–¥–∞–µ—Ç –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç: ```{game["total_bet"]}üìº```',
                    color=0xFFFFFF
                )
                game['active'] = False
                await ctx.followup.send(embed=embed)
                self.stop()
                return
            else:
                self.reset_chamber()
                # –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ ‚Äî –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–≥–∏–±—à–µ–≥–æ
                next_index = 0
                game['current_player'] = game['players'][next_index]
                await self.next_turn(ctx)
        else:
            embed = disnake.Embed(
                title='–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞',
                description=f'{current_player.mention} —Å—Ç—Ä–µ–ª—è–µ—Ç –∏... –í—ã–∂–∏–≤–∞–µ—Ç.',
                color=0xFFFFFF
            )
            await ctx.followup.send(embed=embed)
            await asyncio.sleep(5)

            # –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥
            await self.next_turn(ctx)

    @disnake.ui.button(label='‚¨áÔ∏è', custom_id='down', style=disnake.ButtonStyle.blurple)
    async def down(self, button: disnake.ui.Button, ctx: disnake.MessageInteraction):
        async for message in ctx.channel.history(limit=2):
            if message.author == ctx.bot.user:
                await message.delete()

        embed = disnake.Embed(
            title='–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞',
            description=(
                f'–û—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–∞ {self.game["current_player"].mention}!\n\n'
                f'–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ```{self.game["total_bet"]}üìº```\n'
                f'–°—Ç–∞–≤–∫–∞: ```{self.game["bet"]}üìº```'
            ),
            color=0xFFFFFF
        )
        await ctx.response.send_message(embed=embed, view=self)

def setup(bot):
    bot.add_cog(EconomyGames(bot))